<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>admin</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"TM-Get-VMInfo","taskLabel":"TM - Get VM Info","isActive":true,"taskSummary":"This task Finds VM Info for a VM based on VM Name","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 2 inputs\r\n   vmName (Label: \'VM Name\', Type: text, MappableType: gen_text_input)\r\n   cloudType (Label: \'Cloud Type\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 15 outputs\r\n   vmId (Description: \'vmId\', Type: vm)\r\n   vmwareAccount (Description: \'VMWare Account\', Type: vmwareCloudNamesList)\r\n   hypervAccount (Description: \'HyperV Account\', Type: hypervAccountIdentity)\r\n   vmParentHost (Description: \'Parent Host\', Type: gen_text_input)\r\n   vmGroupId (Description: \'VM Group ID\', Type: gen_text_input)\r\n   vmGroupName (Description: \'VM Group Name\', Type: gen_text_input)\r\n   vmVdcId (Description: \'VM VDC Id\', Type: gen_text_input)\r\n   vmVdcName (Description: \'VM VDC Name\', Type: gen_text_input)\r\n   vmIpAddress (Description: \'VM IP Address\', Type: ipaddress)\r\n   vmPowerStatus (Description: \'VM Power Status\', Type: gen_text_input)\r\n   vmEffectivePowerStatus (Description: \'VM Effective Power Status\', Type: gen_text_input)\r\n   SummaryIPAddress (Description: \'SummaryIPAddress\', Type: gen_text_input)\r\n   SummaryMACAddress (Description: \'SummaryMACAddress\', Type: gen_text_input)\r\n   SummaryVMVlan (Description: \'SummaryVMVlan\', Type: gen_text_input)\r\n   OS (Description: \'OS\', Type: gen_text_input)\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>