<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>admin</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SNowUpdateSRAdditionalComments","taskLabel":"Service Now Update SR Additional Comments","isActive":true,"taskSummary":"This custom task add additional comments on a existing Service Now Service Request (SR)","taskDescription":"Name: SNowUpdateSRAdditionalComments.js\nAuthor: Alejandro Madurga (almadurg@cisco.com)\nDate: 14th January 2016\nVersion: 0.1\nUCSD Version: 5.3.2.1\n\nDescription:\n\tThis custom task add additional comments on a existing Service Now Service Request (SR)\n\t\n\t//INPUTS:\n\t\tSNAccountName: [Credential Policy] Mandatory, the credential policy name to use to login into \n\t\t\t\t\t\t\t\t\tService Now server, should be the \"Cisco Identity Services Engine\" policy type \n\t\tSNIP: [Generic Text input] Mandatory, the IP or Hostname of the Service Now Server\n\t\tSNSR: [Generic Text input] Mandatory, the Service Now SR Id to update. \n\t\t\t\tCould be the SR Number, ie REQ0000011 or the sys_id, ie: 0ca94f715f6021001c9b2572f2b477af\n\t\tSNComments: [Generic Text Input] Optional, the message we want to add to the SR Additional Comments.\n\t\t\n\t\n\t//OUTPUTS\n\t\tNONE","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 5 inputs\r\n   SNAccountName (Label: \'Service Now Credential Policy\', Type: embedded-lov, MappableType: gen_text_input)\r\n   SNIP (Label: \'Service Now IP\', Type: text, MappableType: gen_text_input)\r\n   SNSR (Label: \'Service Now Request Number\', Type: text, MappableType: gen_text_input)\r\n   SNComments (Label: \'Service Request Additional Comments\', Type: text, MappableType: gen_text_input)\r\n   IPAddress (Label: \'IPAddress\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>