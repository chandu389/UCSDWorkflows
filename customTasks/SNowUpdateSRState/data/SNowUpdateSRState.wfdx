<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>admin</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SNowUpdateSRState","taskLabel":"Service Now Update SR State","isActive":true,"taskSummary":"This custom task modify the state on a existing Service Now Service Request (SR)","taskDescription":"Name: SNowUpdateSRState.js\nAuthor: Alejandro Madurga (almadurg@cisco.com)\nDate: 18th January 2016\nVersion: 0.1\nUCSD Version: 5.3.2.1\n\nDescription:\n\tThis custom task modify the state on a existing Service Now Service Request (SR)\n\t\n\t//INPUTS:\n\t\tSNAccountName: [Credential Policy] Mandatory, the credential policy name to use to login into \n\t\t\t\t\t\t\t\t\tService Now server, should be the \"Cisco Identity Services Engine\" policy type \n\t\tSNIP: [Generic Text input] Mandatory, the IP or Hostname of the Service Now Server\n\t\tSNSR: [Generic Text input] Mandatory, the Service Now SR Id to update. \n\t\t\t\tCould be the SR Number, ie REQ0000011 or the sys_id, ie: 0ca94f715f6021001c9b2572f2b477af\n\t\tSNState: [List of Values] Mandatory, state we want to update on the SR. It should be one of the following values:\n\t\t\t\t- Pending Approval\n\t\t\t\t- Approved\n\t\t\t\t- Closed Complete\n\t\t\t\t- Closed Incomplete\n\t\t\t\t- Closed Cancelled\n\t\t\t\t- Closed Rejected\n\n\t\t\n\t\n\t//OUTPUTS\n\t\tNONE","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 4 inputs\r\n   SNAccountName (Label: \'Service Now Credential Policy\', Type: embedded-lov, MappableType: gen_text_input)\r\n   SNIP (Label: \'Service Now IP\', Type: text, MappableType: gen_text_input)\r\n   SNSR (Label: \'Service Now Request Number\', Type: text, MappableType: gen_text_input)\r\n   SNState (Label: \'Service Request State\', Type: embedded-lov, MappableType: gen_text_input)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>