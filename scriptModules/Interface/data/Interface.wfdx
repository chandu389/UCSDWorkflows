<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>admin</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo><entry><key>Description</key><value xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">API implementation of interfaces</value></entry></addiInfo><featureAssetEntry><data>{"Id":93,"name":"InterfaceAPI","description":"","executionScript":"Ii8qXG5OYW1lOiBJbnRlcmZhY2VBUElJbXBsZW1lbnRhdGlvbi5qc1xuQXV0aG9yOiBOZWhhIEd1cHRhIChuZWhhZzJAY2lzY28uY29tKVxuRGF0ZTogMjNyZCBTZXB0ZW1iZXIgMjAxN1xuVXBkYXRlZCBieTogTmVoYSBHdXB0YSAobmVoYWcyQGNpc2NvLmNvbSlcblVwZGF0ZWQgRGF0ZTogMjd0aCBTZXB0ZW1iZXIgMjAxN1xuVmVyc2lvbjogMS4wXG5VQ1NEIFZlcnNpb246IDYuNVxuXG5cbkRlc2NyaXB0aW9uOlxuXHRUaGlzIGxpYmFyYXkgaGFzIEFQSSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGludGVyZmFjZXMuXG4qL1xuXG4vL0lNUE9SVFNcbmltcG9ydFBhY2thZ2UoamF2YS51dGlsKTtcbmltcG9ydFBhY2thZ2UoamF2YS5sYW5nKTtcbmltcG9ydFBhY2thZ2UoamF2YS5pbyk7XG5pbXBvcnRQYWNrYWdlKGphdmEubmV0KTtcbmltcG9ydFBhY2thZ2UoamF2YS5zZWN1cml0eSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi5jb25uZWN0b3IuYWNjb3VudCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi5jb25uZWN0b3IuYWNjb3VudC5jcmVkZW50aWFsKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwpO1xuaW1wb3J0Q2xhc3MoY29tLmNsb3VwaWEubGliLnV0aWwuSlNPTik7XG5pbXBvcnRQYWNrYWdlKGphdmF4Lm5ldC5zc2wpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50KTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQubWV0aG9kcyk7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50LnByb3RvY29sKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwuZWFzeXRydXN0KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLmNJYWFTLnZjZC5hcGkpO1xuaW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5hdXRoKTtcbmltcG9ydFBhY2thZ2Uob3JnLmpzb24pO1xuaW1wb3J0Q2xhc3MoY29tLmNsb3VwaWEubGliLnV0aWwuSlNPTik7XG5cbi8vTG9hZCAgRE5TIExpYnJhcnlcbiAgbG9hZExpYnJhcnkoXCJJbmZvYmxveC9ETlNcIik7XG4gIGxvYWRMaWJyYXJ5KFwiSW50ZXJmYWNlL0NvbW1vblwiKTtcblxuLy9GVU5DVElPTlNcblxuXHRmdW5jdGlvbiBnZXROYW1lUmVxdWVzdCh0eXBlLHN1YnR5cGUsc2VjdXJpdHlab25lLHN1YlNlY3VyaXR5Wm9uZSxkYXRhQ2VudGVyLGVudmlyb25tZW50KXtcblxuXHRcdHZhciBVUkwgPSBcImh0dHA6Ly9qYmEtZDEtaW50LndlYi5iYzoxMDA1MS9jcHNjL25iL2FwaS9yZXF1ZXN0TmFtZVwiO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IFBvc3RNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cdFx0Ly9odHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBdXRob3JpemF0aW9uXCcsIFwnQmFzaWMgXCcrIFN0cmluZyhCYXNlNjRDb2Rlci5lbmNvZGVTdHJpbmcoSW5mb2Jsb3hVc2VyK1wnOlwnK0luZm9ibG94UGFzc3dvcmQpKSk7XG5cdFx0Ly9odHRwTWV0aG9kLnNldERvQXV0aGVudGljYXRpb24odHJ1ZSk7XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcInR5cGVcIix0eXBlKTtcbiAgICAgICAganNvbi5wdXQoXCJzdWJ0eXBlXCIsc3VidHlwZSk7XG4gICAgICAgIGpzb24ucHV0KFwic2VjdXJpdHlab25lXCIsc2VjdXJpdHlab25lKTtcbiAgICAgICAganNvbi5wdXQoXCJzdWJTZWN1cml0eVpvbmVcIixzdWJTZWN1cml0eVpvbmUpO1xuICAgICAgICBqc29uLnB1dChcImRhdGFDZW50ZXJcIixkYXRhQ2VudGVyKTtcbiAgICAgICAganNvbi5wdXQoXCJlbnZpcm9ubWVudFwiLGVudmlyb25tZW50KTtcbiAgICAgICAgdmFyIGRhdGFQYXlsb2FkID0ganNvbi50b1N0cmluZygpO1xuICAgICAgICBsb2dnZXIuYWRkSW5mbyhcIlBheWxvYWQgaXMgXCIrZGF0YVBheWxvYWQpO1xuXHRcblx0XHRyZXF1ZXN0RW50aXR5ID0gbmV3IFN0cmluZ1JlcXVlc3RFbnRpdHkoZGF0YVBheWxvYWQsXCJhcHBsaWNhdGlvbi9qc29uXCIsXCJVVEYtOFwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RFbnRpdHkocmVxdWVzdEVudGl0eSk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBnZXQgYSBuZXcgbmFtZSBmb3IgdGhlIHNlcnZlci4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0Ly8gUmVzcG9uc2U6IHtcJ25hbWVcJzpcJ2xpbjAwMDExXCcsXCdiYWNrdXBOYW1lXCc6XCdsaW4wMDAxMV9idVwnfVxuXHRcdG91dHB1dC5uYW1lPSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcIm5hbWVcIikrNywgcmVzcG9uc2UuaW5kZXhPZihcIixcIiktMSk7XG5cdFx0XG5cdFx0aWYocmVzcG9uc2Uuc3Vic3RyaW5nKHJlc3BvbnNlLmluZGV4T2YoXCJiYWNrdXBOYW1lXCIpKzEyLCByZXNwb25zZS5pbmRleE9mKFwifVwiKSkgPT0gXCJudWxsXCIpe1xuXHRcdFxuXHRcdCAgICBvdXRwdXQuYmFja3VwX25hbWUgPSBudWxsO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0b3V0cHV0LmJhY2t1cF9uYW1lPXJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwiYmFja3VwTmFtZVwiKSsxMywgcmVzcG9uc2UuaW5kZXhPZihcIn1cIiktMSk7XG5cdFx0XG5cdH1cblx0XG5cdFxuXHRcblx0ZnVuY3Rpb24gZXhlY3V0ZVNjcmlwdChzZXJ2ZXJOYW1lLHNjcmlwdElkLHBhcmFtZXRlcnMpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL2V4ZWN1dGVTY3JpcHRcIjtcblx0XHR2YXIgaHR0cE1ldGhvZCA9IG5ldyBQb3N0TWV0aG9kKFVSTCk7IFxuXHRcdHZhciBjbGllbnQgPSBuZXcgSHR0cENsaWVudCgpO1xuXHRcdGh0dHBNZXRob2QuYWRkUmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0SGVhZGVyKFwnQWNjZXB0XCcsXCdhcHBsaWNhdGlvbi9qc29uXCcpO1xuXHRcdFxuXHRcdC8vQ3JlYXRpbmcgdGhlIEpTT04gcGF5bG9hZFxuXHRcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgICAganNvbi5wdXQoXCJzZXJ2ZXJOYW1lXCIsc2VydmVyTmFtZSk7XG4gICAgICAgIGpzb24ucHV0KFwic2NyaXB0SWRcIixzY3JpcHRJZCk7XG4gICAgICAgIGpzb24ucHV0KFwicGFyYW1ldGVyc1wiLHBhcmFtZXRlcnMpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGRhdGFQYXlsb2FkID0ganNvbi50b1N0cmluZygpO1xuICAgICAgICBsb2dnZXIuYWRkSW5mbyhcIlBheWxvYWQgaXMgXCIrZGF0YVBheWxvYWQpO1xuXHRcblx0XHRyZXF1ZXN0RW50aXR5ID0gbmV3IFN0cmluZ1JlcXVlc3RFbnRpdHkoZGF0YVBheWxvYWQsXCJhcHBsaWNhdGlvbi9qc29uXCIsXCJVVEYtOFwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RFbnRpdHkocmVxdWVzdEVudGl0eSk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBmZXRjaCBleGVjdXRpb24gdXVpZCBmb3IgdGhlIHNjcmlwdC4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0XG5cdFx0b3V0cHV0LnNjcmlwdEV4ZWN1dGlvblV1aWQ9IHJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwic2NyaXB0RXhlY3V0aW9uVXVpZFwiKSsyMiwgcmVzcG9uc2UuaW5kZXhPZihcIn1cIiktMSk7XG5cdFx0aW5wdXQgPVwic2NyaXB0RXhlY3V0aW9uVXVpZD1cIitvdXRwdXQuc2NyaXB0RXhlY3V0aW9uVXVpZDtcblx0XHRSZWdpc3Rlcl9VbmRvVGFzayhcImN1c3RvbV9QWFMtSW50ZXJmYWNlMjlcIixpbnB1dCxcIlJvbGxiYWNrX1NjcmlwdF9FeGVjdXRpb25cIixcIlJvbGxiYWNrX1NjcmlwdF9FeGVjdXRpb246XCIrb3V0cHV0LnNjcmlwdEV4ZWN1dGlvblV1aWQpO1xuXG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBnZXRTY3JpcHRFeGVjdXRpb25TdGF0dXMoc2NyaXB0RXhlY3V0aW9uVXVpZCl7XG4gICAgICAgIC8vR2V0IHRoZSBzdGF0dXMgb2YgYW4gZXhlY3V0ZWQgc2NyaXB0XG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL2dldFNjcmlwdEV4ZWN1dGlvblN0YXR1cy9cIitzY3JpcHRFeGVjdXRpb25VdWlkO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IEdldE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XHRcblx0XHQvL0NyZWF0aW5nIHRoZSBKU09OIHBheWxvYWRcblx0LypcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpOyovXG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBmZXRjaCBleGVjdXRpb24gdXVpZCBmb3IgdGhlIHNjcmlwdC4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0XG5cdFx0b3V0cHV0LnN0YXR1cz0gcmVzcG9uc2Uuc3Vic3RyaW5nKHJlc3BvbnNlLmluZGV4T2YoXCJzdGF0dXNcIikrOSwgcmVzcG9uc2UuaW5kZXhPZihcIn1cIiktMSk7XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiByZXF1ZXN0SW1kQXBwcm92YWwodm1NZXRhZGF0YSxyZXF1ZXN0ZWRWQ3B1LHJlcXVlc3RlZE1lbW9yeSxyZXF1ZXN0ZWRTdG9yYWdlLHJlcXVlc3RlckluZm9ybWF0aW9uLHNlcnZlck5hbWUsdW5pcXVlSWQpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL3JlcXVlc3RJbWRBcHByb3ZhbFwiO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IFBvc3RNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cblx0XHQvL0NyZWF0aW5nIHRoZSBKU09OIHBheWxvYWRcblx0XHR2YXIganNvbkRhdGEgPSBuZXcgSlNPTk9iamVjdCgpO1xuXHRcdHZhciBtZXRhZGF0YSA9IG5ldyBKU09OT2JqZWN0KCk7XG4gICAgICAgIGpzb25EYXRhLnB1dChcInZtTWV0YWRhdGFcIixtZXRhZGF0YSk7XG4gICAgICAgIGpzb25EYXRhLnB1dChcInJlcXVlc3RlZFZDcHVcIixyZXF1ZXN0ZWRWQ3B1KTtcbiAgICAgICAganNvbkRhdGEucHV0KFwicmVxdWVzdGVkTWVtb3J5XCIscmVxdWVzdGVkTWVtb3J5KTtcbiAgICAgICAganNvbkRhdGEucHV0KFwicmVxdWVzdGVkU3RvcmFnZVwiLHJlcXVlc3RlZFN0b3JhZ2UpO1xuICAgICAgICBqc29uRGF0YS5wdXQoXCJyZXF1ZXN0ZXJJbmZvcm1hdGlvblwiLHJlcXVlc3RlckluZm9ybWF0aW9uKTtcbiAgICAgICAganNvbkRhdGEucHV0KFwic2VydmVyTmFtZVwiLHNlcnZlck5hbWUpO1xuICAgICAgICBqc29uRGF0YS5wdXQoXCJ1bmlxdWVJZFwiLHVuaXF1ZUlkKTtcbiAgICAgICAgdmFyIGRhdGFQYXlsb2FkID0ganNvbkRhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gbG9nZ2VyLmFkZEluZm8oXCJqU09OIERhdGEgXCIranNvbkRhdGEuZ2V0Q2xhc3MoKSk7XG4gICAgICAgIC8vdmFyIGRhdGFQYXlsb2FkID0gU3RyaW5nKEpTT04uamF2YVRvSnNvblN0cmluZyhqc29uRGF0YSwganNvbkRhdGEuZ2V0Q2xhc3MoKSkpO1xuICAgICAgICBsb2dnZXIuYWRkSW5mbyhcIlBheWxvYWQgaXMgXCIrZGF0YVBheWxvYWQpO1xuXHRcblx0XHRyZXF1ZXN0RW50aXR5ID0gbmV3IFN0cmluZ1JlcXVlc3RFbnRpdHkoZGF0YVBheWxvYWQsXCJhcHBsaWNhdGlvbi9qc29uXCIsXCJVVEYtOFwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RFbnRpdHkocmVxdWVzdEVudGl0eSk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBnZXQgYSBuZXcgbmFtZSBmb3IgdGhlIHNlcnZlci4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0XG5cdFx0b3V0cHV0LmltZEFwcHJvdmFsVXVpZD0gcmVzcG9uc2Uuc3Vic3RyaW5nKHJlc3BvbnNlLmluZGV4T2YoXCJpbWRBcHByb3ZhbFV1aWRcIikrMTgsIHJlc3BvbnNlLmluZGV4T2YoXCJ9XCIpLTEpO1xuXHRcblx0fVxuXHRcblx0ZnVuY3Rpb24gY2FuY2VsSW1kQXBwcm92YWwoaW1kQXBwcm92YWxVdWlkKXtcbiAgICAgICAgLy9UbyBjYW5jZWwgSU1EIHJlcXVlc3Rcblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvY2FuY2VsSW1kQXBwcm92YWxcIjtcblx0XHR2YXIgaHR0cE1ldGhvZCA9IG5ldyBQb3N0TWV0aG9kKFVSTCk7IFxuXHRcdHZhciBjbGllbnQgPSBuZXcgSHR0cENsaWVudCgpO1xuXHRcdGh0dHBNZXRob2QuYWRkUmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0SGVhZGVyKFwnQWNjZXB0XCcsXCdhcHBsaWNhdGlvbi9qc29uXCcpO1xuXHRcdFxuXHRcdC8vQ3JlYXRpbmcgdGhlIEpTT04gcGF5bG9hZFxuXHRcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgICAganNvbi5wdXQoXCJpbWRBcHByb3ZhbFV1aWRcIixpbWRBcHByb3ZhbFV1aWQpO1xuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGZldGNoIGV4ZWN1dGlvbiB1dWlkIGZvciB0aGUgc2NyaXB0LiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gc3RhcnRCYWNrdXAodHlwZSxzdWJ0eXBlLHBhcmFtZXRlcnMpe1xuICAgICAgICAvL1N0YXJ0IHRoZSBiYWNrdXAgb2YgZ2l2ZW4gc2VydmVyXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL3N0YXJ0QmFja3VwL1wiO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IFBvc3RNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cdFx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcInR5cGVcIix0eXBlKTtcbiAgICAgICAganNvbi5wdXQoXCJzdWJ0eXBlXCIsc3VidHlwZSk7XG4gICAgICAgIHZhciBwYXJhbWV0ZXJzSlNPTiA9IG5ldyBKU09OT2JqZWN0KCk7XG4gICAgICAgIC8vcGFyYW1ldGVyc0pTT04ucHV0KFwiVm1QYXJhbWV0ZXJzXCIscGFyYW1ldGVycyk7XG4gICAgICAgIGpzb24ucHV0KFwicGFyYW1ldGVyc1wiLCBwYXJhbWV0ZXJzSlNPTik7XG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpO1xuXHRcdGNsaWVudC5leGVjdXRlTWV0aG9kKGh0dHBNZXRob2QpO1xuXHRcdHZhciBzdGF0dXNjb2RlID0gaHR0cE1ldGhvZC5nZXRTdGF0dXNDb2RlKCk7XG5cdFx0dmFyIHJlc3BvbnNlID0gaHR0cE1ldGhvZC5nZXRSZXNwb25zZUJvZHlBc1N0cmluZygpO1xuXHRcdGlmIChzdGF0dXNjb2RlICE9IDIwMClcblx0XHR7ICAgXG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJVbmFibGUgdG8gZmV0Y2ggZXhlY3V0aW9uIHV1aWQgZm9yIHRoZSBzY3JpcHQuIEhUVFAgcmVzcG9uc2UgY29kZTogXCIgKyBzdGF0dXNjb2RlKTtcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdCBcdGh0dHBNZXRob2QucmVsZWFzZUNvbm5lY3Rpb24oKTtcblx0XHQgICAgLy8gU2V0IHRoaXMgdGFzayBhcyBmYWlsZWQuXG5cdFx0XHRjdHh0LnNldEZhaWxlZChcIlJlcXVlc3QgZmFpbGVkLlwiKTtcblx0XHRcdGN0eHQuZXhpdCgpO1xuXHQgICAgfSBcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlID0gU3RhcnQgQmFjayB1cCBleGVjdXRlZCBzdWNjZXNzZnVsbHlcIik7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0fVxuXHRcblx0XG5cdFxuXHRmdW5jdGlvbiByb2xsYmFja1NjcmlwdEV4ZWN1dGlvbihzY3JpcHRFeGVjdXRpb25VdWlkKXtcbiAgICAgICAgLy9TdGFydCB0aGUgYmFja3VwIG9mIGdpdmVuIHNlcnZlclxuXHRcdHZhciBVUkwgPSBcImh0dHA6Ly9qYmEtZDEtaW50LndlYi5iYzoxMDA1MS9jcHNjL25iL2FwaS9yb2xsYmFja1NjcmlwdEV4ZWN1dGlvbi9cIjtcblx0XHR2YXIgaHR0cE1ldGhvZCA9IG5ldyBQb3N0TWV0aG9kKFVSTCk7IFxuXHRcdHZhciBjbGllbnQgPSBuZXcgSHR0cENsaWVudCgpO1xuXHRcdGh0dHBNZXRob2QuYWRkUmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0SGVhZGVyKFwnQWNjZXB0XCcsXCdhcHBsaWNhdGlvbi9qc29uXCcpO1xuXHRcdFxuXHRcdC8vQ3JlYXRpbmcgdGhlIEpTT04gcGF5bG9hZFxuXHRcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgICAganNvbi5wdXQoXCJzY3JpcHRFeGVjdXRpb25VdWlkXCIsc2NyaXB0RXhlY3V0aW9uVXVpZCk7XG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpO1xuXHRcdGNsaWVudC5leGVjdXRlTWV0aG9kKGh0dHBNZXRob2QpO1xuXHRcdHZhciBzdGF0dXNjb2RlID0gaHR0cE1ldGhvZC5nZXRTdGF0dXNDb2RlKCk7XG5cdFx0dmFyIHJlc3BvbnNlID0gaHR0cE1ldGhvZC5nZXRSZXNwb25zZUJvZHlBc1N0cmluZygpO1xuXHRcdGlmIChzdGF0dXNjb2RlICE9IDIwMClcblx0XHR7ICAgXG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJVbmFibGUgdG8gZmV0Y2ggZXhlY3V0aW9uIHV1aWQgZm9yIHRoZSBzY3JpcHQuIEhUVFAgcmVzcG9uc2UgY29kZTogXCIgKyBzdGF0dXNjb2RlKTtcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdCBcdGh0dHBNZXRob2QucmVsZWFzZUNvbm5lY3Rpb24oKTtcblx0XHQgICAgLy8gU2V0IHRoaXMgdGFzayBhcyBmYWlsZWQuXG5cdFx0XHRjdHh0LnNldEZhaWxlZChcIlJlcXVlc3QgZmFpbGVkLlwiKTtcblx0XHRcdGN0eHQuZXhpdCgpO1xuXHQgICAgfSBcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlID0gUm9sbGJhY2sgc2NyaXB0IGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseVwiKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHR9XG5cdFxuXG4gICAgZnVuY3Rpb24gZmV0Y2hTZWN1cml0eUdyb3VwcyhkYXRhQ2VudGVyLGF2YWlsYWJpbGl0eUFyZWEsc2VjdXJpdHlab25lLHN1YlNlY3VyaXR5Wm9uZSxvcyxlbnZpcm9ubWVudCl7XG5cblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvZmV0Y2hTZWN1cml0eUdyb3Vwc1wiO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IFBvc3RNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cdFxuXHRcdC8vQ3JlYXRpbmcgdGhlIEpTT04gcGF5bG9hZFxuXHRcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgICAganNvbi5wdXQoXCJkYXRhQ2VudGVyXCIsZGF0YUNlbnRlcik7XG4gICAgICAgIGpzb24ucHV0KFwiYXZhaWxhYmlsaXR5QXJlYVwiLGF2YWlsYWJpbGl0eUFyZWEpO1xuICAgICAgICBqc29uLnB1dChcInNlY3VyaXR5Wm9uZVwiLHNlY3VyaXR5Wm9uZSk7XG4gICAgICAgIGpzb24ucHV0KFwic3ViU2VjdXJpdHlab25lXCIsc3ViU2VjdXJpdHlab25lKTtcbiAgICAgICAganNvbi5wdXQoXCJvc1wiLG9zKTtcbiAgICAgICAganNvbi5wdXQoXCJlbnZpcm9ubWVudFwiLGVudmlyb25tZW50KTtcbiAgICAgICAgdmFyIGRhdGFQYXlsb2FkID0ganNvbi50b1N0cmluZygpO1xuICAgICAgICBsb2dnZXIuYWRkSW5mbyhcIlBheWxvYWQgaXMgXCIrZGF0YVBheWxvYWQpO1xuXHRcblx0XHRyZXF1ZXN0RW50aXR5ID0gbmV3IFN0cmluZ1JlcXVlc3RFbnRpdHkoZGF0YVBheWxvYWQsXCJhcHBsaWNhdGlvbi9qc29uXCIsXCJVVEYtOFwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RFbnRpdHkocmVxdWVzdEVudGl0eSk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBnZXQgYSBuZXcgbmFtZSBmb3IgdGhlIHNlcnZlci4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0Ly8gUmVzcG9uc2U6IHtcInNlY3VyaXR5R3JvdXBzXCI6IFt7XCJzZWN1cml0eUdyb3VwTmFtZVwiOiBcInN0cmluZ1wifV19XG5cdFx0aWYocmVzcG9uc2UuY29udGFpbnMoXCJOYW1lXCIpKXtcbiAgICAgICAgXHRvdXRwdXQuc2VjdXJpdHlHcm91cE5hbWU9IHJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwiTmFtZVwiKSs3LCByZXNwb25zZS5pbmRleE9mKFwifVwiKS0xKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgb3V0cHV0LnNlY3VyaXR5R3JvdXBOYW1lPW51bGw7XG4gICAgICAgIH1cblx0XG5cdFx0XG5cdH1cblxuXHRcbiAgICBmdW5jdGlvbiBmZXRjaFZTeXNWUm91dGVyTWFwcGluZyhkYXRhQ2VudGVyLGF2YWlsYWJpbGl0eUFyZWEpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL2ZldGNoVlN5c1ZSb3V0ZXJNYXBwaW5nXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcImRhdGFDZW50ZXJcIixkYXRhQ2VudGVyKTtcbiAgICAgICAganNvbi5wdXQoXCJhdmFpbGFiaWxpdHlBcmVhXCIsYXZhaWxhYmlsaXR5QXJlYSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGdldCBhIG5ldyBuYW1lIGZvciB0aGUgc2VydmVyLiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHRcdC8vU2V0IHJlc3BvbnNlIGluIG91dHB1dCB2YXJpYWJsZXNcblx0XHQvLyBSZXNwb25zZToge1wic2VjdXJpdHlHcm91cHNcIjogW3tcInNlY3VyaXR5R3JvdXBOYW1lXCI6IFwic3RyaW5nXCJ9XX1cblx0XHRvdXRwdXQudlN5cz0gcmVzcG9uc2Uuc3Vic3RyaW5nKHJlc3BvbnNlLmluZGV4T2YoXCJ2c3lzXCIpKzcsIHJlc3BvbnNlLmluZGV4T2YoXCIsXCIpLTEpO1xuXHRcdG91dHB1dC52Um91dGVyPXJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwidnJvdXRlclwiKSsxMCwgcmVzcG9uc2UuaW5kZXhPZihcIn1cIiktMSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJ2U3lzPSBcIitvdXRwdXQudlN5cyk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJ2Um91dGVyPSBcIitvdXRwdXQudlJvdXRlcik7XG5cdFx0XG5cdH1cblx0XG5cdFxuXHRcbiAgICBmdW5jdGlvbiBmZXRjaFN1cGVyTmV0TWFwcGluZyhkYXRhQ2VudGVyLGF2YWlsYWJpbGl0eUFyZWEpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL2ZldGNoU3VwZXJOZXRNYXBwaW5nXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcImRhdGFDZW50ZXJcIixkYXRhQ2VudGVyKTtcbiAgICAgICAganNvbi5wdXQoXCJhdmFpbGFiaWxpdHlBcmVhXCIsYXZhaWxhYmlsaXR5QXJlYSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGdldCBhIG5ldyBuYW1lIGZvciB0aGUgc2VydmVyLiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHRcdC8vU2V0IHJlc3BvbnNlIGluIG91dHB1dCB2YXJpYWJsZXNcblx0XHQvLyBSZXNwb25zZToge1wic2VjdXJpdHlHcm91cHNcIjogW3tcInNlY3VyaXR5R3JvdXBOYW1lXCI6IFwic3RyaW5nXCJ9XX1cblx0XHRvdXRwdXQuaW5mcmFzdHJ1Y3R1cmVTdXBlck5ldFY0PSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcImluZnJhc3RydWN0dXJlU3VwZXJOZXRWNFwiKSsyNywgcmVzcG9uc2UuaW5kZXhPZihcIixcIiktMSk7XG5cdFx0b3V0cHV0LmVuZHBvaW50U3VwZXJOZXRWND1yZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcImVuZHBvaW50U3VwZXJOZXRWNFwiKSsyMSwgcmVzcG9uc2UuaW5kZXhPZihcImluZnJhc3RydWN0dXJlU3VwZXJOZXRWNlwiKS0zKTtcblx0XHRvdXRwdXQuaW5mcmFzdHJ1Y3R1cmVTdXBlck5ldFY2PSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcImluZnJhc3RydWN0dXJlU3VwZXJOZXRWNlwiKSsyNywgcmVzcG9uc2UuaW5kZXhPZihcImVuZHBvaW50U3VwZXJOZXRWNlwiKS0zKTtcblx0XHRvdXRwdXQuZW5kcG9pbnRTdXBlck5ldFY2PXJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwiZW5kcG9pbnRTdXBlck5ldFY2XCIpKzIxLCByZXNwb25zZS5pbmRleE9mKFwifVwiKS0xKTtcblx0XHRcblx0XHRsb2dnZXIuYWRkSW5mbyhcImluZnJhc3RydWN0dXJlU3VwZXJOZXRWND0gXCIrb3V0cHV0LmluZnJhc3RydWN0dXJlU3VwZXJOZXRWNCk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJlbmRwb2ludFN1cGVyTmV0VjQ9IFwiK291dHB1dC5lbmRwb2ludFN1cGVyTmV0VjQpO1xuXHRcdGxvZ2dlci5hZGRJbmZvKFwiaW5mcmFzdHJ1Y3R1cmVTdXBlck5ldFY2PSBcIitvdXRwdXQuaW5mcmFzdHJ1Y3R1cmVTdXBlck5ldFY2KTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcImVuZHBvaW50U3VwZXJOZXRWNj0gXCIrb3V0cHV0LmVuZHBvaW50U3VwZXJOZXRWNik7XG5cdFx0XG4gICAgfVxuXHRcblx0XG5cdFxuXHRcblx0XHRcbiAgICBmdW5jdGlvbiByZXF1ZXN0Q05hbWUoYXBwQ29kZSxlbnZpcm9ubWVudCl7XG5cblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvcmVxdWVzdENOYW1lXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcImFwcENvZGVcIixhcHBDb2RlKTtcbiAgICAgICAganNvbi5wdXQoXCJlbnZpcm9ubWVudFwiLGVudmlyb25tZW50KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpO1xuXHRcdGNsaWVudC5leGVjdXRlTWV0aG9kKGh0dHBNZXRob2QpO1xuXHRcdHZhciBzdGF0dXNjb2RlID0gaHR0cE1ldGhvZC5nZXRTdGF0dXNDb2RlKCk7XG5cdFx0dmFyIHJlc3BvbnNlID0gaHR0cE1ldGhvZC5nZXRSZXNwb25zZUJvZHlBc1N0cmluZygpO1xuXHRcdGlmIChzdGF0dXNjb2RlICE9IDIwMClcblx0XHR7ICAgXG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJVbmFibGUgdG8gZ2V0IGEgbmV3IG5hbWUgZm9yIHRoZSBzZXJ2ZXIuIEhUVFAgcmVzcG9uc2UgY29kZTogXCIgKyBzdGF0dXNjb2RlKTtcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdCBcdGh0dHBNZXRob2QucmVsZWFzZUNvbm5lY3Rpb24oKTtcblx0XHQgICAgLy8gU2V0IHRoaXMgdGFzayBhcyBmYWlsZWQuXG5cdFx0XHRjdHh0LnNldEZhaWxlZChcIlJlcXVlc3QgZmFpbGVkLlwiKTtcblx0XHRcdGN0eHQuZXhpdCgpO1xuXHQgICAgfSBcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgQ29kZT0gXCIrc3RhdHVzY29kZSk7XG5cdFx0XG5cdFx0Ly9TZXQgcmVzcG9uc2UgaW4gb3V0cHV0IHZhcmlhYmxlc1xuXHRcdFxuXHRcdG91dHB1dC5jTmFtZT0gcmVzcG9uc2Uuc3Vic3RyaW5nKHJlc3BvbnNlLmluZGV4T2YoXCJjTmFtZVwiKSs4LCByZXNwb25zZS5pbmRleE9mKFwifVwiKS0xKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcImNOYW1lPSBcIitvdXRwdXQuY05hbWUpO1xuXHR9XG5cdFxuXHRcdFxuXHRmdW5jdGlvbiBjaGVja1Byb2plY3RDb2RlKHByb2plY3RDb2RlKXtcbiAgICAgICAgLy9HZXQgdGhlIHN0YXR1cyBvZiBhbiBleGVjdXRlZCBzY3JpcHRcblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvY2hlY2tQcm9qZWN0Q29kZS9cIitwcm9qZWN0Q29kZTtcblx0XHR2YXIgaHR0cE1ldGhvZCA9IG5ldyBHZXRNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBmZXRjaCBleGVjdXRpb24gdXVpZCBmb3IgdGhlIHNjcmlwdC4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0XG5cdFx0b3V0cHV0LnZhbGlkPSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcInZhbGlkXCIpKzgsIHJlc3BvbnNlLmluZGV4T2YoXCJ9XCIpLTEpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiByZXF1ZXN0QXMoYXZhaWxhYmlsaXR5QXJlYSxkY0xvY2F0aW9uLHNlY3VyaXR5Wm9uZSl7XG5cblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvcmVxdWVzdEFzXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgXG4gICAgICAgIGpzb24ucHV0KFwiYXZhaWxhYmlsaXR5QXJlYVwiLGF2YWlsYWJpbGl0eUFyZWEpO1xuICAgICAgICBqc29uLnB1dChcImRjTG9jYXRpb25cIixkY0xvY2F0aW9uKTtcbiAgICAgICAganNvbi5wdXQoXCJzZWN1cml0eVpvbmVcIixzZWN1cml0eVpvbmUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGRhdGFQYXlsb2FkID0ganNvbi50b1N0cmluZygpO1xuICAgICAgICBsb2dnZXIuYWRkSW5mbyhcIlBheWxvYWQgaXMgXCIrZGF0YVBheWxvYWQpO1xuXHRcblx0XHRyZXF1ZXN0RW50aXR5ID0gbmV3IFN0cmluZ1JlcXVlc3RFbnRpdHkoZGF0YVBheWxvYWQsXCJhcHBsaWNhdGlvbi9qc29uXCIsXCJVVEYtOFwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RFbnRpdHkocmVxdWVzdEVudGl0eSk7XG5cdFx0Y2xpZW50LmV4ZWN1dGVNZXRob2QoaHR0cE1ldGhvZCk7XG5cdFx0dmFyIHN0YXR1c2NvZGUgPSBodHRwTWV0aG9kLmdldFN0YXR1c0NvZGUoKTtcblx0XHR2YXIgcmVzcG9uc2UgPSBodHRwTWV0aG9kLmdldFJlc3BvbnNlQm9keUFzU3RyaW5nKCk7XG5cdFx0aWYgKHN0YXR1c2NvZGUgIT0gMjAwKVxuXHRcdHsgICBcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlVuYWJsZSB0byBnZXQgYSBuZXcgbmFtZSBmb3IgdGhlIHNlcnZlci4gSFRUUCByZXNwb25zZSBjb2RlOiBcIiArIHN0YXR1c2NvZGUpO1xuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0IFx0aHR0cE1ldGhvZC5yZWxlYXNlQ29ubmVjdGlvbigpO1xuXHRcdCAgICAvLyBTZXQgdGhpcyB0YXNrIGFzIGZhaWxlZC5cblx0XHRcdGN0eHQuc2V0RmFpbGVkKFwiUmVxdWVzdCBmYWlsZWQuXCIpO1xuXHRcdFx0Y3R4dC5leGl0KCk7XG5cdCAgICB9IFxuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgPSBcIityZXNwb25zZSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSBDb2RlPSBcIitzdGF0dXNjb2RlKTtcblx0XHRcblx0XHQvL1NldCByZXNwb25zZSBpbiBvdXRwdXQgdmFyaWFibGVzXG5cdFx0b3V0cHV0LmFzTnVtYmVyPSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcImFzTnVtYmVyXCIpKzEwLCByZXNwb25zZS5pbmRleE9mKFwifVwiKSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJBUyBOdW1iZXI9IFwiK291dHB1dC5hc051bWJlcik7XG5cdFx0Ly9pbnB1dCA9XCJzY3JpcHRFeGVjdXRpb25VdWlkPVwiK291dHB1dC5zY3JpcHRFeGVjdXRpb25VdWlkO1xuXHRcdHZhciBpbnB1dCA9IFwiYXNOdW1iZXI9XCIrb3V0cHV0LmFzTnVtYmVyO1xuICAgIFx0UmVnaXN0ZXJfVW5kb1Rhc2soXCJjdXN0b21fUFhTLUludGVyZmFjZTE3XCIsaW5wdXQsXCJSZWxlYXNlQXNOdW1iZXJcIixcIlJlbGVhc2VBc051bWJlcjpcIitvdXRwdXQuYXNOdW1iZXIpO1xuXHRcdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZWxlYXNlQXMoYXNOdW1iZXIpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL3JlbGVhc2VBc1wiO1xuXHRcdHZhciBodHRwTWV0aG9kID0gbmV3IFBvc3RNZXRob2QoVVJMKTsgXG5cdFx0dmFyIGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7XG5cdFx0aHR0cE1ldGhvZC5hZGRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcblx0XHRodHRwTWV0aG9kLnNldFJlcXVlc3RIZWFkZXIoXCdBY2NlcHRcJyxcJ2FwcGxpY2F0aW9uL2pzb25cJyk7XG5cdFxuXHRcdC8vQ3JlYXRpbmcgdGhlIEpTT04gcGF5bG9hZFxuXHRcdHZhciBqc29uID0gbmV3IEpTT05PYmplY3QoKTtcbiAgICAgXG4gICAgICAgIGpzb24ucHV0KFwiYXNOdW1iZXJcIixhc051bWJlcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGdldCBhIG5ldyBuYW1lIGZvciB0aGUgc2VydmVyLiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVBcyhhc051bWJlcixzZWN1cml0eVpvbmUpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL3VwZGF0ZUFzXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgXG4gICAgICAgIGpzb24ucHV0KFwiYXNOdW1iZXJcIixhc051bWJlcik7XG4gICAgICAgIGpzb24ucHV0KFwic2VjdXJpdHlab25lXCIsc2VjdXJpdHlab25lKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpO1xuXHRcdGNsaWVudC5leGVjdXRlTWV0aG9kKGh0dHBNZXRob2QpO1xuXHRcdHZhciBzdGF0dXNjb2RlID0gaHR0cE1ldGhvZC5nZXRTdGF0dXNDb2RlKCk7XG5cdFx0dmFyIHJlc3BvbnNlID0gaHR0cE1ldGhvZC5nZXRSZXNwb25zZUJvZHlBc1N0cmluZygpO1xuXHRcdGlmIChzdGF0dXNjb2RlICE9IDIwMClcblx0XHR7ICAgXG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJVbmFibGUgdG8gZ2V0IGEgbmV3IG5hbWUgZm9yIHRoZSBzZXJ2ZXIuIEhUVFAgcmVzcG9uc2UgY29kZTogXCIgKyBzdGF0dXNjb2RlKTtcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdCBcdGh0dHBNZXRob2QucmVsZWFzZUNvbm5lY3Rpb24oKTtcblx0XHQgICAgLy8gU2V0IHRoaXMgdGFzayBhcyBmYWlsZWQuXG5cdFx0XHRjdHh0LnNldEZhaWxlZChcIlJlcXVlc3QgZmFpbGVkLlwiKTtcblx0XHRcdGN0eHQuZXhpdCgpO1xuXHQgICAgfSBcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgQ29kZT0gXCIrc3RhdHVzY29kZSk7XG5cdFx0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlcXVlc3RWbGFucyhhdmFpbGFiaWxpdHlBcmVhLGRjTG9jYXRpb24sdmxhblBvb2wsYW1vdW50T2ZWbGFucyl7XG5cblx0XHR2YXIgVVJMID0gXCJodHRwOi8vamJhLWQxLWludC53ZWIuYmM6MTAwNTEvY3BzYy9uYi9hcGkvcmVxdWVzdFZsYW5zXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgXG4gICAgICAgIGpzb24ucHV0KFwiYXZhaWxhYmlsaXR5QXJlYVwiLGF2YWlsYWJpbGl0eUFyZWEpO1xuICAgICAgICBqc29uLnB1dChcImRjTG9jYXRpb25cIixkY0xvY2F0aW9uKTtcbiAgICAgICAganNvbi5wdXQoXCJ2bGFuUG9vbFwiLHZsYW5Qb29sKTtcbiAgICAgICAganNvbi5wdXQoXCJhbW91bnRPZlZsYW5zXCIsYW1vdW50T2ZWbGFucyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGdldCBhIG5ldyBuYW1lIGZvciB0aGUgc2VydmVyLiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHRcdC8vU2V0IHJlc3BvbnNlIGluIG91dHB1dCB2YXJpYWJsZXNcblx0XHRmb3IodmFyIGk9MDsgaTxhbW91bnRPZlZsYW5zOyBpKyspe1xuXHRcdCAgICAgb3V0cHV0LnV1aWQgPSByZXNwb25zZS5zdWJzdHJpbmcocmVzcG9uc2UuaW5kZXhPZihcInV1aWRcIiwgcmVzcG9uc2UuaW5kZXhPZihcInV1aWRcIikgKyBpKSs3LCByZXNwb25zZS5pbmRleE9mKFwidmxhbklkXCIsIHJlc3BvbnNlLmluZGV4T2YoXCJ2bGFuSWRcIikgKyBpKS0zKTtcblx0XHQgICAgIC8vTmVlZCB0byBjaGFuZ2UgY29kZSB0byBzdXBwb3J0IG11bHRpcGxlIHZsYW5JZFxuXHRcdCAgICAgb3V0cHV0LnZsYW5JZCA9IHJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwidmxhbklkXCIsIHJlc3BvbnNlLmluZGV4T2YoXCJ2bGFuSWRcIikgKyAwKSs4LCByZXNwb25zZS5pbmRleE9mKFwifVwiKSk7XG5cdFx0fVxuXHRcdC8vb3V0cHV0LnZTeXM9IHJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwidnN5c1wiKSs3LCByZXNwb25zZS5pbmRleE9mKFwiLFwiKS0xKTtcblx0XHQvL291dHB1dC52Um91dGVyPXJlc3BvbnNlLnN1YnN0cmluZyhyZXNwb25zZS5pbmRleE9mKFwidnJvdXRlclwiKSsxMCwgcmVzcG9uc2UuaW5kZXhPZihcIn1cIiktMSk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJ1dWlkPSBcIitvdXRwdXQudXVpZCk7XG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJ2bGFuSWQ9IFwiK291dHB1dC52bGFuSWQpO1xuXHRcdHZhciBpbnB1dCA9IFwidXVpZD1cIitvdXRwdXQudXVpZDtcbiAgICBcdFJlZ2lzdGVyX1VuZG9UYXNrKFwiY3VzdG9tX1BYUy1JbnRlcmZhY2UxNFwiLGlucHV0LFwiUmVsZWFzZV9WTEFOXCIsXCJSZWxlYXNlX1ZMQU46XCIrb3V0cHV0LnV1aWQpO1xuXHRcdFxuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gdXBkYXRlVmxhbih1dWlkLHZsYW5JZCxhdmFpbGFiaWxpdHlBcmVhLGRjTG9jYXRpb24sdmxhblBvb2wsc2VjdXJpdHlab25lKXtcblxuXHRcdHZhciBVUkwgPSBcImh0dHA6Ly9qYmEtZDEtaW50LndlYi5iYzoxMDA1MS9jcHNjL25iL2FwaS91cGRhdGVWbGFuXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICAgICBqc29uLnB1dChcInV1aWRcIix1dWlkKTtcbiAgICAgICAganNvbi5wdXQoXCJ2bGFuSWRcIix2bGFuSWQpO1xuICAgICAgICBqc29uLnB1dChcImF2YWlsYWJpbGl0eUFyZWFcIixhdmFpbGFiaWxpdHlBcmVhKTtcbiAgICAgICAganNvbi5wdXQoXCJkY0xvY2F0aW9uXCIsZGNMb2NhdGlvbik7XG4gICAgICAgIGpzb24ucHV0KFwidmxhblBvb2xcIix2bGFuUG9vbCk7XG4gICAgICAgIGpzb24ucHV0KFwic2VjdXJpdHlab25lXCIsc2VjdXJpdHlab25lKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhUGF5bG9hZCA9IGpzb24udG9TdHJpbmcoKTtcbiAgICAgICAgbG9nZ2VyLmFkZEluZm8oXCJQYXlsb2FkIGlzIFwiK2RhdGFQYXlsb2FkKTtcblx0XG5cdFx0cmVxdWVzdEVudGl0eSA9IG5ldyBTdHJpbmdSZXF1ZXN0RW50aXR5KGRhdGFQYXlsb2FkLFwiYXBwbGljYXRpb24vanNvblwiLFwiVVRGLThcIik7XG5cdFx0aHR0cE1ldGhvZC5zZXRSZXF1ZXN0RW50aXR5KHJlcXVlc3RFbnRpdHkpO1xuXHRcdGNsaWVudC5leGVjdXRlTWV0aG9kKGh0dHBNZXRob2QpO1xuXHRcdHZhciBzdGF0dXNjb2RlID0gaHR0cE1ldGhvZC5nZXRTdGF0dXNDb2RlKCk7XG5cdFx0dmFyIHJlc3BvbnNlID0gaHR0cE1ldGhvZC5nZXRSZXNwb25zZUJvZHlBc1N0cmluZygpO1xuXHRcdGlmIChzdGF0dXNjb2RlICE9IDIwMClcblx0XHR7ICAgXG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJVbmFibGUgdG8gZ2V0IGEgbmV3IG5hbWUgZm9yIHRoZSBzZXJ2ZXIuIEhUVFAgcmVzcG9uc2UgY29kZTogXCIgKyBzdGF0dXNjb2RlKTtcblx0XHRcdGxvZ2dlci5hZGRFcnJvcihcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdCBcdGh0dHBNZXRob2QucmVsZWFzZUNvbm5lY3Rpb24oKTtcblx0XHQgICAgLy8gU2V0IHRoaXMgdGFzayBhcyBmYWlsZWQuXG5cdFx0XHRjdHh0LnNldEZhaWxlZChcIlJlcXVlc3QgZmFpbGVkLlwiKTtcblx0XHRcdGN0eHQuZXhpdCgpO1xuXHQgICAgfSBcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlID0gXCIrcmVzcG9uc2UpO1xuXHRcdGxvZ2dlci5hZGRJbmZvKFwiUmVzcG9uc2UgQ29kZT0gXCIrc3RhdHVzY29kZSk7XG5cdFx0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlbGVhc2VWbGFuKHV1aWQpe1xuXG5cdFx0dmFyIFVSTCA9IFwiaHR0cDovL2piYS1kMS1pbnQud2ViLmJjOjEwMDUxL2Nwc2MvbmIvYXBpL3JlbGVhc2VWbGFuXCI7XG5cdFx0dmFyIGh0dHBNZXRob2QgPSBuZXcgUG9zdE1ldGhvZChVUkwpOyBcblx0XHR2YXIgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTtcblx0XHRodHRwTWV0aG9kLmFkZFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEhlYWRlcihcJ0FjY2VwdFwnLFwnYXBwbGljYXRpb24vanNvblwnKTtcblx0XG5cdFx0Ly9DcmVhdGluZyB0aGUgSlNPTiBwYXlsb2FkXG5cdFx0dmFyIGpzb24gPSBuZXcgSlNPTk9iamVjdCgpO1xuICAgICBcbiAgICAgICAganNvbi5wdXQoXCJ1dWlkXCIsdXVpZCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YVBheWxvYWQgPSBqc29uLnRvU3RyaW5nKCk7XG4gICAgICAgIGxvZ2dlci5hZGRJbmZvKFwiUGF5bG9hZCBpcyBcIitkYXRhUGF5bG9hZCk7XG5cdFxuXHRcdHJlcXVlc3RFbnRpdHkgPSBuZXcgU3RyaW5nUmVxdWVzdEVudGl0eShkYXRhUGF5bG9hZCxcImFwcGxpY2F0aW9uL2pzb25cIixcIlVURi04XCIpO1xuXHRcdGh0dHBNZXRob2Quc2V0UmVxdWVzdEVudGl0eShyZXF1ZXN0RW50aXR5KTtcblx0XHRjbGllbnQuZXhlY3V0ZU1ldGhvZChodHRwTWV0aG9kKTtcblx0XHR2YXIgc3RhdHVzY29kZSA9IGh0dHBNZXRob2QuZ2V0U3RhdHVzQ29kZSgpO1xuXHRcdHZhciByZXNwb25zZSA9IGh0dHBNZXRob2QuZ2V0UmVzcG9uc2VCb2R5QXNTdHJpbmcoKTtcblx0XHRpZiAoc3RhdHVzY29kZSAhPSAyMDApXG5cdFx0eyAgIFxuXHRcdFx0bG9nZ2VyLmFkZEVycm9yKFwiVW5hYmxlIHRvIGdldCBhIG5ldyBuYW1lIGZvciB0aGUgc2VydmVyLiBIVFRQIHJlc3BvbnNlIGNvZGU6IFwiICsgc3RhdHVzY29kZSk7XG5cdFx0XHRsb2dnZXIuYWRkRXJyb3IoXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHQgXHRodHRwTWV0aG9kLnJlbGVhc2VDb25uZWN0aW9uKCk7XG5cdFx0ICAgIC8vIFNldCB0aGlzIHRhc2sgYXMgZmFpbGVkLlxuXHRcdFx0Y3R4dC5zZXRGYWlsZWQoXCJSZXF1ZXN0IGZhaWxlZC5cIik7XG5cdFx0XHRjdHh0LmV4aXQoKTtcblx0ICAgIH0gXG5cdFx0bG9nZ2VyLmFkZEluZm8oXCJSZXNwb25zZSA9IFwiK3Jlc3BvbnNlKTtcblx0XHRsb2dnZXIuYWRkSW5mbyhcIlJlc3BvbnNlIENvZGU9IFwiK3N0YXR1c2NvZGUpO1xuXHRcdFxuXHR9XG5cdCI=","isActive":false,"entryType":"library","createdTime":1506494977066,"lastValidateTime":1509990607308,"scriptModuleId":"Interface"}</data></featureAssetEntry><featureAssetEntry><data>{"Id":94,"name":"Common","description":"Common APIs for Interface","executionScript":"Ii8qXG5OYW1lOiBDb21tb24uanNcbkF1dGhvcjogTmVoYSBHdXB0YVxuQ3JlYXRpb24gRGF0ZTogMjZ0aCBPY3QgMjAxN1xuVXBkYXRlZCBkYXRlOiBcblVwZGF0ZWQgYnkgOiBuZWhhZzJcblVwZGF0ZWQgQ29tbWVudCA6IEFkZGVkIFJlZ2lzdGVyX1VuZG8gVGFzayBNZXRob2RcblZlcnNpb246IDEuMFxuVUNTRCBWZXJzaW9uOiA2LjVcblxuRGVzY3JpcHRpb246XG4tLT5UaGlzIGxpYmFyYXkgaGFzIHJvdXRpbmVzIHdoaWNoIGFyZSBjb21tb24gZm9yIGFsbCBvdGhlciBsaWJyYXJpZXMuIEZvbGxvd2luZyBhcmUgYXZhaWxhYmxlIEZVTkNUSU9OUyBpbiBjdXJyZW50IHZlcnNpb25cblxuRlVOQ1RJT05zXG4gIDEpUmVnaXN0ZXJfVW5kb1Rhc2sgLSBHZW5lcmljIHJvdXRpbmUgZm9yIHJlZ2lzdGVyaW5nIHVuZG8gdGFza3NcbiovXG4vL0lNUE9SVFNcbmltcG9ydFBhY2thZ2UoamF2YS51dGlsKTtcbmltcG9ydFBhY2thZ2UoamF2YS5sYW5nKTtcbmltcG9ydFBhY2thZ2UoamF2YS5pbyk7XG5pbXBvcnRQYWNrYWdlKGphdmEubmV0KTtcbmltcG9ydFBhY2thZ2UoamF2YS5zZWN1cml0eSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi5jb25uZWN0b3IuYWNjb3VudCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi5jb25uZWN0b3IuYWNjb3VudC5jcmVkZW50aWFsKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwpO1xuaW1wb3J0Q2xhc3MoY29tLmNsb3VwaWEubGliLnV0aWwuSlNPTik7XG5pbXBvcnRQYWNrYWdlKGphdmF4Lm5ldC5zc2wpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50KTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQubWV0aG9kcyk7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50LnByb3RvY29sKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwuZWFzeXRydXN0KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLmNJYWFTLnZjZC5hcGkpOztcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuYXV0aCk7XG5pbXBvcnRQYWNrYWdlKG9yZy5qc29uKTtcbmltcG9ydFBhY2thZ2Uob3JnLmpzb24uc2ltcGxlLnBhcnNlci5KU09OUGFyc2VyKTtcbi8vR2xvYmFsIFZhcmlhYmxlcyBoZXJlXG52YXIgQ29tbW9uRXhlY3V0aW9uUGF0aD1cIkludGVyZmFjZS9Db21tb25cIjtcblxuLy9GVU5DVElPTlNcblxuZnVuY3Rpb24gUmVnaXN0ZXJfVW5kb1Rhc2soVGFza05hbWUsSW5wdXRzLEFzc2V0SUQsQXNzZXREZXNjcmlwdGlvbil7XG4gIGxvZ2dlci5hZGRJbmZvKFwiRXhlY3V0aW5nIFwiK0NvbW1vbkV4ZWN1dGlvblBhdGgrXCIvUmVnaXN0ZXJfVW5kb1Rhc2tcIik7XG5cdHZhciBoYW5kbGVyID0gVGFza05hbWU7XG5cdHZhciB0YXNrID0gY3R4dC5jcmVhdGVJbm5lclRhc2tDb250ZXh0KFRhc2tOYW1lKTtcbiAgdmFyIGlucHV0cz1JbnB1dHMuc3BsaXQoXCIjQCNcIik7XG4gIGlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGlucHV0KXtcbiAgdmFyIGtleV92YWx1ZT1pbnB1dC5zcGxpdChcIj1cIik7XG4gIGxvZ2dlci5hZGRJbmZvKFwiS2V5IGlzIDpcIitrZXlfdmFsdWVbMF0rXCIsVmFsdWUgaXM6XCIra2V5X3ZhbHVlWzFdKTtcbiAgdGFzay5zZXRJbnB1dChrZXlfdmFsdWVbMF0sa2V5X3ZhbHVlWzFdKTtcbiAgfSk7XG5cdGN0eHQuZ2V0Q2hhbmdlVHJhY2tlcigpLnVuZG9hYmxlUmVzb3VyY2VNb2RpZmllZChBc3NldElELFxuICAgICAgICAgICAgICAgIFN0cmluZyhjdHh0LmdldFNySWQoKSksXG4gICAgICAgICAgICAgICAgQXNzZXRJRCxcblx0XHRcdFx0ICAgICAgICBBc3NldERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgdGFzay5nZXRDb25maWdPYmplY3QoKSk7XG59XG4i","isActive":false,"entryType":"library","createdTime":1508988861760,"lastValidateTime":1508988861760,"scriptModuleId":"Interface"}</data></featureAssetEntry><featureAssetEntry><data>{"Id":95,"name":"Vlan","description":"","executionScript":"Ii8qXG5OYW1lOiBGNUJpZ0lQTmV0d29yay5qc1xuQXV0aG9yOiBSdWNoaWthIERhbGFsIChydWNkYWxhbEBjaXNjby5jb20pXG5EYXRlOiAxMHRoIE9jdG9iZXIgMjAxN1xuVmVyc2lvbjogMS4wXG5VQ1NEIFZlcnNpb246IDYuMC4xLjFcblxuXG5EZXNjcmlwdGlvbjpcblRoaXMgbW9kdWxlIGhhcyB0aGUgZnVuY3Rpb25zIHRvIGNyZWF0ZS9tb2RpZnkvZGVsZXRlIE5FVFdPUksgZWxlbWVudHMgaW4gdGhlIEJJRyBJUC5cblxuRlVOQ1RJT05zOlxuMS5cdGdldF9DcmVhdGVWTEFOX0pzb25cbjIuXHRDcmVhdGVGNVZsYW5cbjMuXHREZWxldGVGNVZsYW5cbjQuXHRcblxuXG4qL1xuXG5cbi8vSU1QT1JUU1xuaW1wb3J0UGFja2FnZShqYXZhLnV0aWwpO1xuaW1wb3J0UGFja2FnZShqYXZhLmxhbmcpO1xuaW1wb3J0UGFja2FnZShqYXZhLmlvKTtcbmltcG9ydFBhY2thZ2UoamF2YS5uZXQpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIuY29ubmVjdG9yLmFjY291bnQpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIuY29ubmVjdG9yLmFjY291bnQuY3JlZGVudGlhbCk7XG5pbXBvcnRQYWNrYWdlKG9yZy5qc29uKTtcbmltcG9ydFBhY2thZ2Uob3JnLmpzb24uc2ltcGxlLnBhcnNlci5KU09OUGFyc2VyKTtcblxuXG4vKipcbiAgKkZ1bmN0aW9uIHRvIGxvYWQgb3RoZXIgbGliYXJpZXNcbiAgKlNwZWNpZnkgYWxsIHRoZSBkZXBlbmRlbnQgTW9kdWxlcyBoZXJlXG4gICovXG5mdW5jdGlvbiBMb2FkX0xpYnJhcmllcygpXG57XG4gIGxvYWRMaWJyYXJ5KFwiVUNTRC9DcmVkZW50aWFsUG9saWN5XCIpO1xuICBsb2FkTGlicmFyeShcIk5ldHdvcmsvQ29tbW9uXCIpO1xufVxuTG9hZF9MaWJyYXJpZXMoKTtcblxudmFyIEV4ZWN1dGlvblBhdGggPSBcIkY1L05ldHdvcmtcIjtcblxuZnVuY3Rpb24gZWNobygpXG57XG4gICAgbG9nZ2VyLmFkZEluZm8oXCJFY2hvIGVjaG8gZWNob1wiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9WbGFuKEY1Q3JlZGVudGlhbHMsIEY1SVAsIFZsYW5OYW1lLCBWbGFuVGFnSWQsIFZsYW5JbnRlcmZhY2UpIHtcblxuICAgIGxvZ2dlci5hZGRJbmZvKFwiRXhlY3V0aW5nIFwiICsgRXhlY3V0aW9uUGF0aCArIFwiL0NyZWF0ZUY1VmxhblwiKTtcbiAgICBsb2dnZXIuYWRkSW5mbyhcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ3JlYXRpbmcgRjUgVkxBTi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG4gICAgLy9HZXQgdGhlIGluZm8gZnJvbSB0aGUgYWNjb3VudC5cbiAgICB2YXIgRjVBY2NvdW50ID0gZ2V0QWNjb3VudChGNUNyZWRlbnRpYWxzKTtcbiAgICB2YXIgRjVVc2VyID0gRjVBY2NvdW50LmdldFVzZXJOYW1lKCk7XG4gICAgdmFyIEY1UGFzc3dvcmQgPSBGNUFjY291bnQuZ2V0UGFzc3dvcmQoKTtcbiAgICB2YXIgRjVQb3J0ID0gcGFyc2VJbnQoU3RyaW5nKEY1QWNjb3VudC5nZXRQb3J0KCkpKTtcbiAgICB2YXIgRjVQcm90b2NvbCA9IFN0cmluZyhGNUFjY291bnQuZ2V0UHJvdG9jYWwoKSk7XG5cblxuICAgIC8vU2hvdyBDb25uZWN0aW9uIEluZm8uXG4gICAgbG9nZ2VyLmFkZEluZm8oXCJVc2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgZnJvbSB0aGUgc2VsZWN0ZWQgYWNjb3VudDogXCIgKyBGNUNyZWRlbnRpYWxzKTtcbiAgICBsb2dnZXIuYWRkSW5mbyhcIiAtLS0tIFVzZXJuYW1lOiBcIiArIEY1VXNlcik7XG4gICAgbG9nZ2VyLmFkZEluZm8oXCIgLS0tLSBQcm90b2NvbDogXCIgKyBGNVByb3RvY29sKTtcbiAgICBsb2dnZXIuYWRkSW5mbyhcIiAtLS0tIFBvcnQ6IFwiICsgU3RyaW5nKEY1UG9ydCkpO1xuICAgIGxvZ2dlci5hZGRJbmZvKFwiIC0tLS0gRjUgIElQOiBcIiArIEY1SVApO1xuICAgIGxvZ2dlci5hZGRJbmZvKFwiIC0tLS0gVkxBTiBOYW1lOiBcIiArIFZsYW5OYW1lKTtcbiAgICBsb2dnZXIuYWRkSW5mbyhcIiAtLS0tIFRhZ0lkOiBcIiArIFZsYW5UYWdJZCk7XG4gICAgbG9nZ2VyLmFkZEluZm8oXCIgLS0tLSBuZXR3b3JrIEludGVyZmFjZXM6IFwiICsgVmxhbkludGVyZmFjZSk7XG59XG4gIg==","isActive":false,"entryType":"library","createdTime":1509448555303,"lastValidateTime":1509449175549,"scriptModuleId":"Interface"}</data></featureAssetEntry><featureName>Interface</featureName><type>SCRIPT_MODULES</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>